// Code generated by `gen-functions`. DO NOT EDIT.
package compute

import (
	"slices"
	"testing"
)

func one() int                            { return 1 }
func inc(a int) int                       { return a + 1 }
func add2(a, b int) int                   { return a + b }
func add3(a, b, c int) int                { return a + b + c }
func add4(a, b, c, d int) int             { return a + b + c + d }
func add5(a, b, c, d, e int) int          { return a + b + c + d + e }
func add6(a, b, c, d, e, f int) int       { return a + b + c + d + e + f }
func add7(a, b, c, d, e, f, g int) int    { return a + b + c + d + e + f + g }
func add8(a, b, c, d, e, f, g, h int) int { return a + b + c + d + e + f + g + h }

func TestFunctions(t *testing.T) {
	pad := NewPad[int, int]()

	pad.SetFunc0(0, one)
	pad.SetFunc1(1, inc, 0)
	pad.SetFunc2(2, add2, 0, 1)
	pad.SetFunc3(3, add3, 0, 1, 2)
	pad.SetFunc4(4, add4, 0, 1, 2, 3)
	pad.SetFunc5(5, add5, 0, 1, 2, 3, 4)
	pad.SetFunc6(6, add6, 0, 1, 2, 3, 4, 5)
	pad.SetFunc7(7, add7, 0, 1, 2, 3, 4, 5, 6)
	pad.SetFunc8(8, add8, 0, 1, 2, 3, 4, 5, 6, 7)

	res, err := calcInts(pad, 0, 1, 2, 3, 4, 5, 6, 7, 8)

	if err != nil {
		t.Fatal(err)
	}

	if !slices.Equal(res, []int{1, 2, 3, 6, 12, 24, 48, 96, 192}) {
		t.Fatalf("unexpected result: %v", res)
	}
}
