// Code generated by `gen-functions`. DO NOT EDIT.
package compute

// SetFunc0 adds function without arguments to the [Pad].
func (p *Pad[K, V]) SetFunc0(key K, fn func() V) {
	p.env[key] = &formula[K, V]{fn: func(...V) V { return fn() }}
}

// SetFunc1 adds 1-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc1(key K, fn func(V) V, arg0 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0]) },
		args: []K{arg0},
	}
}

// SetFunc2 adds 2-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc2(key K, fn func(V, V) V, arg0, arg1 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0], args[1]) },
		args: []K{arg0, arg1},
	}
}

// SetFunc3 adds 3-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc3(key K, fn func(V, V, V) V, arg0, arg1, arg2 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0], args[1], args[2]) },
		args: []K{arg0, arg1, arg2},
	}
}

// SetFunc4 adds 4-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc4(key K, fn func(V, V, V, V) V, arg0, arg1, arg2, arg3 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0], args[1], args[2], args[3]) },
		args: []K{arg0, arg1, arg2, arg3},
	}
}

// SetFunc5 adds 5-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc5(key K, fn func(V, V, V, V, V) V, arg0, arg1, arg2, arg3, arg4 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0], args[1], args[2], args[3], args[4]) },
		args: []K{arg0, arg1, arg2, arg3, arg4},
	}
}

// SetFunc6 adds 6-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc6(key K, fn func(V, V, V, V, V, V) V, arg0, arg1, arg2, arg3, arg4, arg5 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0], args[1], args[2], args[3], args[4], args[5]) },
		args: []K{arg0, arg1, arg2, arg3, arg4, arg5},
	}
}

// SetFunc7 adds 7-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc7(key K, fn func(V, V, V, V, V, V, V) V, arg0, arg1, arg2, arg3, arg4, arg5, arg6 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]) },
		args: []K{arg0, arg1, arg2, arg3, arg4, arg5, arg6},
	}
}

// SetFunc8 adds 8-argument function to the [Pad].
func (p *Pad[K, V]) SetFunc8(key K, fn func(V, V, V, V, V, V, V, V) V, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 K) {
	p.env[key] = &formula[K, V]{
		fn:   func(args ...V) V { return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]) },
		args: []K{arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7},
	}
}
