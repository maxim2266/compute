<?php echo "// Code generated by `$argv[0]`. DO NOT EDIT.\n" ?>

package compute

// SetFunc0 inserts the given 0-argument function into the [Pad].
func (p *Pad[K, V]) SetFunc0(key K, fn func() V) {
	p.env[key] = &formula[K, V]{fn: func(...V) V { return fn() }}
}

// SetFunc1 inserts the given 1-argument function into the [Pad].
func (p *Pad[K, V]) SetFunc1(key K, fn func(V) V, arg0 K) {
        p.env[key] = &formula[K, V]{
                fn:   func(args ...V) V { return fn(args[0]) },
                args: []K{arg0},
        }
}

<?php
# number of functions
define("N", isset($argv[1]) && is_numeric($argv[1]) ? (int)$argv[1] : 10);

# function definitions generator
$args = 'arg0';
$arr = 'args[0]';
$params = 'V';

for($i = 2; $i <= N; ++$i) {
	$args .= ', arg' . ($i - 1);
	$arr .= ', args[' . ($i - 1) . ']';
	$params .= ', V';

	$str = <<<EOD
	// SetFunc$i inserts the given $i-argument function into the [Pad].
	func (p *Pad[K, V]) SetFunc$i(key K, fn func($params) V, $args K) {
		p.env[key] = &formula[K, V]{
			fn:   func(args ...V) V { return fn($arr) },
			args: []K{{$args}},
		}
	}


	EOD;

	echo $str;
}
?>
