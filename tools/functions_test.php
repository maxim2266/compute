<?php echo "// Code generated by `$argv[0]`. DO NOT EDIT.\n";

# number of functions
define("N", isset($argv[1]) && is_numeric($argv[1]) ? (int)$argv[1] : 10);

# function setters generator
function gen_setters() {
	$args = '0';

	for($i = 2; $i <= N; ++$i) {
		$args .= ', ' . $i - 1;
		echo "\tpad.SetFunc$i($i, add$i, $args)\n";
	}
}

# function definitions generator
function gen_defs() {
	$args = $calc = 'a';

	for($i = 2; $i <= N; ++$i) {
		$c = chr(ord('a') + $i - 1);
		$args .= ', ' . $c;
		$calc .= ' + ' . $c;

		echo "func add$i($args int) int	{ return $calc }\n";
	}
}

# result calculator
function calc_result() {
	$arr = [ 1, 2, 3 ];

	for($i = count($arr); $i <= N; ++$i) {
		$arr[] = $arr[$i - 1] << 1;
	}

	echo implode(', ', $arr);
}
?>

package compute

import (
	"slices"
	"testing"
)

func TestFunctions(t *testing.T) {
	pad := NewPad[int, int]()

	pad.SetFunc0(0, one)
	pad.SetFunc1(1, inc, 0)
<?php gen_setters() ?>

	res, err := calcInts(pad, <?php echo implode(', ', range(0, N)) ?>)

	if err != nil {
		t.Fatal(err)
	}

	if !slices.Equal(res, []int{<?php calc_result() ?>}) {
		t.Fatalf("unexpected result: %v", res)
	}
}

func one() int		{ return 1 }
func inc(a int) int	{ return a + 1 }
<?php gen_defs() ?>
